//The MAIN Function
void main(int argc,char** argv){
   
   if(!isSouth)//halant split word
   {
      int i=0,count=0;
      for(i=0;i<strlen(syllabifiedWordOut);i++)
      {
         if(syllabifiedWordOut[i] =='&')count++;//just to get count of phones
      }
      int splitPosition = 2;// by default split after 2 phones
      if(GetPhoneType(syllabifiedWordOut,1) == 1) //check first is vowel
      {
         if(count>2){//more than 1 phones are there
            int type = GetPhoneType(syllabifiedWordOut,2); // get type of 2nd phone
            if(type==2)splitPosition=1;
            else if(type==3)splitPosition=3;
         }else{
            splitPosition=1;
         }
      }
      count=0;
      for(i=0;i<strlen(syllabifiedWordOut);i++)
      {
         if(syllabifiedWordOut[i] =='&')count++;
         if(count>splitPosition)
         {
           count=i;
           break;
         }
      }
      char * start,* end;
      // for first char never remove 'av'
      start = strdup(syllabifiedWordOut);
      end = strdup(syllabifiedWordOut);
      end += count;
      start[count]='\0';
      if(DEBUG)printf("posi  %d %s %s\n",count,start,end);
      end = SchwaSpecificCorrection(end);
      if(DEBUG)printf("prefinal : %s\n", syllabifiedWordOut);
      strcpy(syllabifiedWordOut,start);
      strcat(syllabifiedWordOut,end);
      if(DEBUG)printf("prefinal1 : %s\n", syllabifiedWordOut);
      syllabifiedWordOut = CleanseWord(syllabifiedWordOut);
      if(DEBUG)printf("final : %s\n", syllabifiedWordOut);
      syllabifiedWordOut = SchwaDoubleConsonent(syllabifiedWordOut);//for eu&C&C&V
      if(DEBUG)printf("final0 : %s\n", syllabifiedWordOut);
   }

   syllabifiedWordOut = GeminateCorrection(syllabifiedWordOut,0);//chk here
   if(DEBUG)printf("Syllabified Word gemCorr : %s\n", syllabifiedWordOut);

   syllabifiedWordOut = MiddleVowel(syllabifiedWordOut); // middle vowel correction
   if(DEBUG)printf("Syllabified Word  middle vowel : %s\n", syllabifiedWordOut);

   syllabifiedWordOut = Syllabilfy(syllabifiedWordOut);
   if(DEBUG)printf("Syllabified Word final : %s\n", syllabifiedWordOut);

   SplitSyllables(syllabifiedWordOut);
   if(DEBUG)printf("Splitted to Syllables\n");
   WritetoFiles();
   if(DEBUG)printf("Files created %s\n",outputText);
}